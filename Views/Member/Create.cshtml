@model GymManagement.Models.ViewModel.MemberViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/scripts/jquery-1.8.0.min.js"></script>
<script>
    var _validFileExtensions = [".jpg", ".jpeg", ".bmp", ".gif", ".png"];
    function ValidateSingleInput(oInput) {
        if (oInput.type == "file") {
            var sFileName = oInput.value;
            if (sFileName.length > 0) {
                var blnValid = false;
                for (var j = 0; j < _validFileExtensions.length; j++) {
                    var sCurExtension = _validFileExtensions[j];
                    if (sFileName.substr(sFileName.length - sCurExtension.length, sCurExtension.length).toLowerCase() == sCurExtension.toLowerCase()) {
                        blnValid = true;
                        break;
                    }
                }

                if (!blnValid) {
                    alert("Sorry, " + sFileName + " is invalid, allowed extensions are: " + _validFileExtensions.join(", "));
                    oInput.value = "";
                    return false;
                }
            }
        }
        return true;
    }
</script>

<script>
    function onlyNumbers(event) {
        var charCode = (event.which) ? event.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
</script>
<script>
    // Except only numbers and dot (.) for salary textbox
    function onlyDotsAndNumbers(event) {
        var charCode = (event.which) ? event.which : event.keyCode
        if (charCode == 46) {
            return true;
        }
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }



</script>
<script type="text/javascript">





    $(function () {
        $("#MembershipTypeId").change(function () {
            var selectedItem = $(this).val();
            var MyAppUrlSettings = {
                MyUsefulUrl: '@Url.Action("GetPricebyMembershiptypeId", "Member")'
            }
            $.ajax({
                cache: false,
                type: "GET",
                url: MyAppUrlSettings.MyUsefulUrl,
                data: { "membershiptypeId": selectedItem },
                success: function (result) {
                    $("#Price").val(result)

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Price.');
                    statesProgress.hide();
                }
            });
        });
    });
</script>

@using (Html.BeginForm("Create", "Member", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)

    <div class="module">
        <div class="module-head">
            <h3>Membership Registration</h3>
        </div>
        <div class="module-body">
            <fieldset>
                <legend>Membership Registration Form</legend>
                <div class="form-horizontal col-md-12">
                    <div class="col-sm-6" style="float: left; padding-left: 30px; padding-right: 30px;">
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Fullname)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Fullname)
                            @Html.ValidationMessageFor(model => model.Fullname)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Email)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Email)
                            @Html.ValidationMessageFor(model => model.Email)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Photo)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Photo, new { Type = "file", @class = "form-control",@onchange="return Validate(this);" })
                            @Html.ValidationMessageFor(model => model.Photo)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Phone)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Phone, new { @onkeypress = "return onlyNumbers(event);" })
                            @Html.ValidationMessageFor(model => model.Phone)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Gender)
                        </div>
                        <div class="editor-field">
                            @Html.RadioButtonFor(model => model.Gender, "Male", new { Checked = "checked" })Male
             @Html.RadioButtonFor(model => model.Gender, "Female")Female

            @Html.ValidationMessageFor(model => model.Gender)
                        </div>
                    </div>
                    <div class="col-sm-6" style="float: left; padding-left: 30px; padding-right: 30px">

                        <div class="editor-label">
                            @Html.LabelFor(model => model.MembershipTypeId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.MembershipTypeId, new SelectList(ViewBag.MembershipType, "MembershipTypeId", "MembershipName"), "Choose Membership")
                            @Html.ValidationMessageFor(model => model.MembershipTypeId)
                        </div>


                        <div class="editor-label">
                            @Html.LabelFor(model => model.Price)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Price, new { @readonly = true })
                            @Html.ValidationMessageFor(model => model.Price)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.RegDate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.RegDate, "{0:MM/dd/yyyy}", new { @readonly = true })
                            @Html.ValidationMessageFor(model => model.RegDate)
                        </div>



                        <div class="editor-label">
                            @Html.LabelFor(model => model.ShiftId)
                        </div>
                        <div class="editor-field">
                            @Html.DropDownListFor(model => model.ShiftId, new SelectList(ViewBag.Shift, "ShiftId", "ShiftName"), "Choose Shift")
                            @Html.ValidationMessageFor(model => model.ShiftId)
                        </div>
                    </div>

                </div>
            </fieldset>
            <fieldset>
                <legend>User Credential</legend>
                <div class="form-horizontal col-md-12" style="padding-left: 30px">

                    <div class="editor-label">
                        @Html.LabelFor(model => model.Username)
                    </div>
                    <div class="editor-field">
                        @Html.EditorFor(model => model.Username)
                        @Html.ValidationMessageFor(model => model.Username)
                    </div>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.Password)
                    </div>
                    <div class="editor-field">
                        @Html.PasswordFor(model => model.Password)
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>

                    <div class="editor-label">
                        @Html.LabelFor(model => model.RoleId)
                    </div>
                    <div class="editor-field">
                        @Html.DropDownListFor(model => model.RoleId, new SelectList(ViewBag.Role, "RoleId", "RoleName"), "Choose Role")

                        @Html.ValidationMessageFor(model => model.RoleId)
                    </div>

                    <p style="margin-top: 10px">
                        <input type="submit" value="Create" class="btn btn-info" />

                        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })

                    </p>
                    <h2>@ViewBag.Message</h2>
                </div>


            </fieldset>

        </div>
    </div>
      
             
   
}


